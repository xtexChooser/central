use sea_orm_migration::prelude::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
	async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
		manager
			.create_table(
				Table::create()
					.table(User::Table)
					.if_not_exists()
					.col(
						ColumnDef::new(User::Id)
							.uuid()
							.not_null()
							.primary_key()
							.unique_key(),
					)
					.col(ColumnDef::new(User::Name).string().not_null())
					.col(ColumnDef::new(User::Salt).string().not_null())
					.col(ColumnDef::new(User::ModrinthId).string().not_null())
					.col(
						ColumnDef::new(User::Sysop)
							.boolean()
							.not_null()
							.default(false),
					)
					.col(ColumnDef::new(User::Blocked).timestamp().null())
					.to_owned(),
			)
			.await?;
		manager
			.create_index(
				Index::create()
					.name("users_id")
					.table(User::Table)
					.if_not_exists()
					.col(User::Id)
					.unique()
					.index_type(IndexType::BTree)
					.to_owned(),
			)
			.await?;
		manager
			.create_index(
				Index::create()
					.name("users_name")
					.table(User::Table)
					.if_not_exists()
					.col(User::Name)
					.unique()
					.index_type(IndexType::BTree)
					.to_owned(),
			)
			.await?;
		manager
			.create_index(
				Index::create()
					.name("users_mr_id")
					.table(User::Table)
					.if_not_exists()
					.col(User::ModrinthId)
					.unique()
					.index_type(IndexType::BTree)
					.to_owned(),
			)
			.await?;
		Ok(())
	}

	async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
		manager
			.drop_index(Index::drop().table(User::Table).name("users_id").to_owned())
			.await?;
		manager
			.drop_index(
				Index::drop()
					.table(User::Table)
					.name("users_name")
					.to_owned(),
			)
			.await?;
		manager
			.drop_index(
				Index::drop()
					.table(User::Table)
					.name("users_mr_id")
					.to_owned(),
			)
			.await?;
		manager
			.drop_table(Table::drop().table(User::Table).to_owned())
			.await?;
		Ok(())
	}
}

#[derive(DeriveIden)]
enum User {
	Table,
	Id,
	Name,
	Salt,
	ModrinthId,
	Sysop,
	Blocked,
}
