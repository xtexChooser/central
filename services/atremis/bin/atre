#!/usr/bin/env bash
set -euo pipefail

atreDir=/srv/atremis
isDevelEnv=""
if ! [[ -e "$atreDir" ]]; then
	atreDir="$(pwd)"
	isDevelEnv=y
fi

shortHostname="$(hostname -s)"

realUser="$(id -un)"
user="${ATREMIS_USER:-$realUser}"
export ATREMIS_USER="$user"
isRootUser=""
! [[ "$realUser" == "root" ]] || isRootUser=y

# shellcheck source=/dev/null
! [[ -f /srv/secrets/atre/env.sh ]] || source /srv/secrets/atre/env.sh

function atre::log {
	echo -e "\e[0;34m${FUNCNAME[1]}: $*\e[0m"
}

function atre::error {
	echo -e "\e[0;31m${FUNCNAME[1]}: $*\e[0m" 1>&2
	exit 1
}

function atre::assertNonDevel {
	[[ -z "$isDevelEnv" ]] || atre::error "Not available in development environment"
}

function atre::succ {
	echo -e "\e[0;32m$*\e[0m"
}

function atre::usage {
	cat 1>&2 <<XXX
usage: $0 <COMMAND>

COMMAND:
    help                        Print usage
    pull                        Fetch and apply changes from repository
    fetch                       Fetch changes from repository
    apply                       Apply configuration
    root [COMMAND]              Run command as root
    update                      Update
    publog <LOG>                Send log to publogs channel
XXX
}

function atre::publog {
	[[ -z "$isDevelEnv" ]] || return
	if [[ -n "$PUBLOGS_TOKEN" ]]; then
		local messageHeader tags="s:$shortHostname"
		if [[ -n "$isRootUser" ]]; then
			messageHeader="$shortHostname"
		else
			messageHeader="$user@$shortHostname"
			tags+=",u:$user"
		fi
		local title="$1"
		shift
		curl -sSf --proto '=https' --tlsv1.2 --max-time 5 \
			-H "Authorization: Bearer $PUBLOGS_TOKEN" \
			-H "X-Title: $messageHeader: $title" \
			-H "X-Tags: $tags" \
			-d "$(printf '%s\n' "Timestamp: $(date -Iseconds -u)" "$@")" \
			https://ntfy.xvnet.eu.org/publogs >/dev/null
		atre::log "Publicly logged: $title"
	fi
}

function atre::pull {
	atre::assertNonDevel
	cd "$atreDir"

	atre::fetch || true

	atre::apply
}

function atre::fetch {
	atre::assertNonDevel
	atre::log "Fetch updates"
	atre::root "$0" internal atre::callFetch
}

function atre::callFetch {
	atre::assertNonDevel
	cd "$atreDir"
	git fetch --depth 1 origin
	git reset --hard origin/main
	git submodule sync --recursive
	git submodule update --init --recursive --recommend-shallow
	git -c gc.reflogExpire=1 -c gc.reflogExpireUnreachable=0 \
		-c gc.rerereResolved=0 -c gc.rerereUnresolved=0 \
		-c gc.pruneExpire=now gc --quiet

	atre::log "Current HEADs:"
	git show --oneline --no-patch --no-abbrev-commit HEAD
	git submodule -q foreach git show --oneline --no-patch --no-abbrev-commit HEAD
}

function atre::apply {
	atre::assertNonDevel
	atre::log "Apply configuration"
	cd "$atreDir"
	atre::root make "${@:-apply}"
}

function atre::root {
	atre::assertNonDevel
	if [[ -n "$isRootUser" ]]; then
		# DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
		# XDG_RUNTIME_DIR=/run/user/$(id -u)
		# export DBUS_SESSION_BUS_ADDRESS XDG_RUNTIME_DIR
		"$@"
	else
		atre::log "Switch to root"
		sudo --preserve-env=ATREMIS_USER \
			"$0" root "$@"
	fi
}

function atre::svc {
	if [[ -z "$isDevelEnv" ]]; then
		atre::root "$0" internal atre::callSvc "$@"
	else
		atre::callSvc "$@"
	fi
}

function atre::callSvc {
	local svc="${1//\//::}" script="$2"
	local svcDir="$atreDir/services/$1"
	atre::log "Running script: $svc $script"
	if [[ -f "$svcDir/scripts/$script.sh" ]]; then
		shift 2
		"$svcDir/scripts/$script.sh" "$@"
		return
	elif [[ -f "$svcDir/maint.sh" ]]; then
		(
			# shellcheck source=/dev/null
			source "$svcDir/maint.sh"
			if declare -fF "atre::$svc::$script" >/dev/null; then
				shift 2
				"atre::$svc::$script" "$@"
			elif declare -fF "atre::maintenance::$svc" >/dev/null; then
				shift 1
				"atre::maintenance::$svc" "$@"
			else
				atre::error "Maintenance script $svc $script not found"
			fi
			return
		)
		return
	else
		atre::error "Maintenance script $svc $script not found"
	fi
}

function atre::catlog {
	atre::assertNonDevel
	local svc=$1
	local scriptFile=$atreDir/services/$svc/script/catlog.sh
	if [[ -f "$scriptFile" ]]; then
		atre::root "$scriptFile"
	else
		atre::root journalctl -ef -n 50 -t "$svc"
	fi
}

function atre::update {
	atre::assertNonDevel
	atre::root "$0" internal atre::prepareForUpdate
}

function atre::prepareForUpdate {
	atre::doUpdate | tee --append /var/log/atremis/update.log
}

function atre::doUpdate {
	atre::pull
	atre::svc atremis update-containers
	atre::apply
}

function atre::main {
	[ $# -eq 0 ] && atre::usage && exit
	local cmd=$1
	shift

	case $cmd in
	help | --help)
		atre::usage "$@"
		exit
		;;
	pull)
		atre::pull "$@"
		;;
	fetch)
		atre::fetch "$@"
		;;
	apply)
		atre::apply "$@"
		;;
	su | sudo)
		[ $# -eq 0 ] && atre::root "$SHELL" && exit
		atre::root "$@"
		;;
	svc | s)
		atre::svc "$@"
		;;
	log | logs)
		atre::catlog "$@"
		;;
	internal)
		"$@"
		;;
	update | upd)
		atre::update "$@"
		;;
	publog)
		atre::publog "$@"
		;;
	*)
		atre::error "unknown option: $1"
		;;
	esac
}

atre::main "$@"
