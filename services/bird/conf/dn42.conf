# DN42 filters

roa4 table dn42_roa4;
roa6 table dn42_roa6;

function check_dn42_roa() {
	case net.type {
		NET_IP4: return roa_check(dn42_roa4, net, bgp_path.last);
		NET_IP6: return roa_check(dn42_roa6, net, bgp_path.last);
		else: print "check_dn42_roa: unexpected net.type ", net.type, " ", net; return ROA_INVALID;
	}
}

protocol static dn42_roa_static4 {
	roa4 { table dn42_roa4; };
	route 172.20.206.64/26 max 26 as 4242420361;
	include "/etc/bird/roa_dn42.conf";
};

protocol static dn42_roa_static6 {
	roa6 { table dn42_roa6; };
	route fd00:443a:ef14::/48 max 48 as 4242420361;
	include "/etc/bird/roa_dn42_v6.conf";
};

# protocol rpki dn42_rpki_sunnet {
# 	roa4 { table dn42_roa4; };
# 	roa6 { table dn42_roa6; };

# 	remote "rpki.dn42.6700.cc" port 8282;

# 	retry keep 90;
# 	refresh keep 1800;
# 	expire keep 172800;
# }

define DN42_PREFIXES_V4 = [
	172.20.0.0/14{21,29},	# dn42
	172.20.0.0/24{28,32},	# dn42 Anycast
	172.21.0.0/24{28,32},	# dn42 Anycast
	172.22.0.0/24{28,32},	# dn42 Anycast
	172.23.0.0/24{28,32},	# dn42 Anycast
	172.31.0.0/16+,			# ChaosVPN
	10.100.0.0/14+,			# ChaosVPN
	10.127.0.0/16{16,32},	# neonetwork
	10.0.0.0/8{15,24}		# Freifunk.net
];

function is_dn42_prefix() -> bool {
	case net.type {
		NET_IP4: return net ~ DN42_PREFIXES_V4;
		NET_IP6: return net ~ [ fd00::/8{44,64} ];
		else: print "is_dn42_prefix: unexpected net.type ", net.type, " ", net; return false;
	}
}

define COMMUNITY_DN42_UNSAFE = [ (64511, 31..33) ];

% dn42ExportPrefixesV4=('172.20.206.64/26')
% dn42ExportPrefixesV6=('fd00:443a:ef14::/48')

define DN42_EXPORT_PREFIXES_V4 = [ <%% IFS=','; echo "${dn42ExportPrefixesV4[*]}" %> ];
define DN42_EXPORT_PREFIXES_V6 = [ <%% IFS=','; echo "${dn42ExportPrefixesV6[*]}" %> ];

protocol static dn42_static4 {
	% for prefix in "${dn42ExportPrefixesV4[@]}"; do
	route <% $prefix %> reject;
	% done

	ipv4 { import all; export none; };
};

protocol static dn42_static6 {
	% for prefix in "${dn42ExportPrefixesV6[@]}"; do
	route <% $prefix %> reject;
	% done

	ipv6 { import all; export none; };
};

function is_dn42_export_prefix() -> bool {
	case net.type {
		NET_IP4: return net ~ DN42_EXPORT_PREFIXES_V4;
		NET_IP6: return net ~ DN42_EXPORT_PREFIXES_V6;
		else: print "is_dn42_export_prefix: unexpected net.type ", net.type, " ", net; return false;
	}
}

filter dn42_import {
	if ! is_dn42_prefix() then reject;
	if is_xvnet_prefix() then reject;
	if bgp_path.len > 10 then {
		# print "[dn42] BGP path too long ", net, " len ", bgp_path.len, " proto ", proto, bgp_path;
		reject;
	}
	if check_dn42_roa() != ROA_VALID then {
		# print "[dn42] ROA failed for ", net, " ASN ", bgp_path.last, " proto ", proto;
		reject;
	}
	if COMMUNITY_DN42_UNSAFE ~ bgp_community then bgp_large_community.add(COMMUNITY_XVN_UNSAFE_TRANSIT);

	if COMMUNITY_XVN_UNSAFE_TRANSIT ~ bgp_large_community then preference = preference - 20;
	accept;
}

filter dn42_export {
	if ! is_dn42_prefix() then reject;
	if is_xvnet_prefix() && ! is_dn42_export_prefix() then reject;

	strip_confed_as();
	if COMMUNITY_XVN_UNSAFE_TRANSIT ~ bgp_large_community then bgp_community.add((64511, 32));
	bgp_large_community.add(COMMUNITY_XVN_EXPORT_SELF);
	accept;
}

template bgp dn42_peer {
	local as 4242420361;

	ipv4 {
		import filter dn42_import;
		export filter dn42_export;
		import limit 1000 action block;
		rpki reload on;
		import table on;
		extended next hop on;
	};

	ipv6 {
		import filter dn42_import;
		export filter dn42_export;
		import limit 1000 action block; 
		rpki reload on;
		import table on;
	};
}

protocol bgp dn42_grc from dn42_peer {
	neighbor fd42:4242:2601:ac12::1 as 4242422602;
	multihop;
	ipv4 {
		add paths tx;
		import none;
	};
	ipv6 {
		add paths tx;
		import none;
	};
};

include "/etc/bird/dn42.conf";
