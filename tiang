#!/usr/bin/env bash

function tiang::trace {
	[ "$TIANG_TRACE" == "true" ] && echo -e "\e[0;30m${FUNCNAME[1]}: ${BASH_LINENO[0]}: $*\e[0m"
}

function tiang::error {
	echo -e "\e[0;31mtiang: $*\e[0m" 1>&2
	exit 1
}

function tiang::succ {
	echo -e "\e[0;32m$*\e[0m"
}

function tiang::usage {
	tiang::trace "print usage"
	cat 1>&2 <<XXX
usage: $0 [OPTIONS] <COMMANDS>

OPTIONS:

    -? --help                   Print usage
	--trace                     Enable tracing logs
	-j --jobs     [JOBS]        Set parallel execution count (default: 4)

COMMANDS:

  TARGETING:
    -a --target   [NAME] [ADDR] Add a new target with given ssh address
    -n --remove   [NAME]        Remove a target from target list
    -y --include  [NAME]        Add a target to target list

    -f --filter   [FILTER]      Filter targets with jq filters
    -g --grep     [NAME]        Filter targets with name literal
    -g! --grep!   [NAME]        Filter targets with no name literal
    -r --regex    [REGEX]       Filter targets with name regex
    -r! --regex!  [REGEX]       Filter targets with no name regex

  EXECUTING:
    -p --print                  Print all selected targets
    -pa --print-all             Print all available targets
    -k --confirm                Print selected targets and ask for confirm

    -c --command  [COMMAND]     Run command on targets
    -t --copy     [FILE] [DEST] Copy a file to targets
    -s --script   [FILE] [ARGS] Copy a script to targets and run it

XXX
}

declare -a tiangTargets tiangAllTargets
declare -A tiangTargetSSH tiangTargetSSHPort tiangTargetData
function tiang::target {
	[ $# -lt 2 ] || [ $# -gt 3 ] && tiang::error "tiang::target <NAME> <SSH ADDRESS[:PORT]> [DATA]"
	tiangAllTargets+=("$1")
	IFS=":" read -r tiangAddr tiangPort <<<"$2"
	tiangTargetSSH[$1]="$tiangAddr"
	tiangTargetSSHPort[$1]="$tiangPort"
	[ "$3" == "" ] || tiangTargetData[$1]="$3"
}

declare -a tiangCommandHandlers
function tiang::defineCommand {
	[ $# -ne 1 ] && tiang::error "tiang::defineCommand <HANDLER>"
	tiangCommandHandlers+=("$1")
}

function tiang::loadProfiles {
	declare -a tiangProfileFiles
	[[ "$TIANG_PROFILE" != "" ]] && tiangProfileFiles+=("$TIANG_PROFILE")
	[[ -f ".tianguan.sh" ]] && tiangProfileFiles+=(".tianguan.sh")
	[[ -f ".tianguan.bash" ]] && tiangProfileFiles+=(".tianguan.bash")
	[[ -f ".tianguan.profile.sh" ]] && tiangProfileFiles+=(".tianguan.profile.sh")
	[[ -f ".tianguan/profile" ]] && tiangProfileFiles+=(".tianguan/profile")
	[[ -f ".tianguan/profile.sh" ]] && tiangProfileFiles+=(".tianguan/profile.sh")
	[[ -f ".tianguan/profile.bash" ]] && tiangProfileFiles+=(".tianguan/profile.bash")

	local tiangProfile
	[ ${#tiangProfileFiles[@]} -eq 0 ] && tiang::error "no profile scripts found"
	for tiangProfile in "${tiangProfileFiles[@]}"; do
		tiang::trace "sourcing $tiangProfile"
		# shellcheck source=/dev/null
		source "$tiangProfile"
	done

	[ ${#tiangAllTargets[@]} -eq 0 ] && tiang::error "no targets are defined"
}

declare tiangRunParallel=${TIANG_PARALLEL:-4}
function tiang::runParallelOnTargets {
	[ $# -ne 1 ] && tiang::error "tiang::runParallelOnTargets <FUNC>"
	tiang::trace parallel execution $1
	local tiangTgt tiangParaCount=0 tiangRetId
	local -a tiangParaIds
	for tiangTgt in "${tiangTargets[@]}"; do
		# wait slot
		if ((tiangParaCount >= tiangRunParallel)); then
			# shellcheck disable=SC2068
			wait -f -n -p tiangRetId ${tiangParaIds[@]}
			for i in "${!tiangParaIds[@]}"; do [ "${tiangParaIds[$i]}" == "$tiangRetId" ] && {
				unset "tiangParaIds[$i]"
				break
			}; done
			((tiangParaCount--))
		fi
		# start new job
		((tiangParaCount++))
		"$1" "$tiangTgt" &
		tiangParaIds+=($!)
	done
	# sync all jobs
	# shellcheck disable=SC2068
	wait -f ${tiangParaIds[@]}
}

function tiang::cmd::target {
	[ $# -lt 3 ] && tiang::error "2 parameters are required for --target"
	tiang::target "$2" "$3"
	tiangTargets+=("$2")
}

function tiang::cmd::remove {
	[ $# -lt 2 ] && tiang::error "1 parameter is required for --remove"
	tiangTargets=("${tiangTargets[@]/$2/}")
}

function tiang::cmd::include {
	[ $# -lt 2 ] && tiang::error "1 parameter is required for --include"
	[[ " ${tiangAllTargets[*]} " = *" $2 "* ]] || tiang::error "target $2 is never defined. use -a instead"
	tiangTargets+=("$2")
}

function tiang::cmd::filter {
	[ $# -lt 2 ] && tiang::error "1 parameter is required for --filter"
	local tiangTgt tiangTgtData tiangTgtJq
	local -a tiangTgts
	for tiangTgt in "${tiangTargets[@]}"; do
		tiangTgtData=${tiangTargetData[$tiangTgt]}
		[ "$tiangTgtData" == "" ] && continue
		tiangTgtJq=$(jq -c "$2" <<<"$tiangTgtData")
		{ [ "$tiangTgtJq" == "null" ] || [ "$tiangTgtJq" == "false" ]; } && continue
		tiangTgts+=("$tiangTgt")
	done
	tiangTargets=("${tiangTgts[@]}")
}

function tiang::cmd::grep {
	[ $# -lt 2 ] && tiang::error "1 parameter is required for --grep"
	local tiangTgts
	local -a tiangGrepFlags=(-i)
	{ [ "$1" == '-g' ] || [ "$1" == '--grep' ]; } && tiangGrepFlags+=(-F)
	{ [ "$1" == '-g!' ] || [ "$1" == '--grep!' ]; } && tiangGrepFlags+=(-F -v)
	{ [ "$1" == '-r' ] || [ "$1" == '--regex' ]; } && tiangGrepFlags+=(-E)
	{ [ "$1" == '-r!' ] || [ "$1" == '--regex!' ]; } && tiangGrepFlags+=(-E -v)
	# shellcheck disable=SC2068
	tiangTgts=$( (
		local IFS=$'\n'
		echo "${tiangTargets[*]}"
	) | grep ${tiangGrepFlags[@]} "$2")
	readarray -d $'\n' -t tiangTargets <<<"$tiangTgts"
}

function tiang::cmd::print {
	local IFS=$'\n'
	echo "${tiangTargets[*]}"
}

function tiang::cmd::printAll {
	local IFS=$'\n'
	echo "${tiangAllTargets[*]}"
}

function tiang::cmd::confirm {
	tiang::succ "Targets (${#tiangAllTargets[*]}):"
	local tiangTgt tiangChoice="."
	for tiangTgt in "${tiangTargets[@]}"; do echo "  - $tiangTgt"; done
	while [ "$tiangChoice" != "" ] && [ "$tiangChoice" != "y" ] && [ "$tiangChoice" != "n" ]; do
		printf "\x1b[38;5;22m(y/n): \e[0m"
		read -p "" -n1 -r tiangChoice
		[ "$tiangChoice" != "" ] && printf "\n"
	done
	[ "$tiangChoice" == "n" ] && exit 1
}

function tiang::main {
	[ $# -eq 0 ] && tiang::usage && exit

	tiang::loadProfiles
	tiangTargets=("${tiangAllTargets[@]}")

	while [ $# -ne 0 ]; do
		case $1 in
		-\? | --help)
			tiang::usage
			exit
			;;
		--trace)
			TIANG_TRACE=true
			shift
			;;
		-j | --jobs)
			tiangRunParallel=$2
			shift 2
			;;
		-a | --target)
			tiang::cmd::target "$@"
			shift 3
			;;
		-n | --remove)
			tiang::cmd::remove "$@"
			shift 2
			;;
		-y | --include)
			tiang::cmd::include "$@"
			shift 2
			;;
		-f | --filter)
			tiang::cmd::filter "$@"
			shift 2
			;;
		-g | --grep | -g! | --grep! | -r | --regex | -r! | --regex!)
			tiang::cmd::grep "$@"
			shift 2
			;;
		-p | --print)
			tiang::cmd::print "$@"
			shift 1
			;;
		-pa | --print-all)
			tiang::cmd::printAll "$@"
			shift 1
			;;
		-k | --confirm)
			tiang::cmd::confirm "$@"
			shift 1
			;;
		*)
			local tiangCommandHandler tiangPrevParames=$#
			for tiangCommandHandler in "${tiangCommandHandlers[@]}"; do
				"$tiangCommandHandler"
				[ $# -ne $tiangPrevParames ] && break
			done
			[ $# -eq $tiangPrevParames ] && tiang::error "unknown option: $1"
			;;
		esac
	done
}

tiang::main "$@"
